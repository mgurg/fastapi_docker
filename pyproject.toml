[tool.poetry]
name = "fastapi_docker"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = { extras = ["all"], version = "^0.111" }
SQLAlchemy = "^2.0"
alembic = "^1.12.0"
uvicorn = ">=0.23.1"
gunicorn = "^22.0.0"
python-dotenv = "^1.0.0"
loguru = "^0.7.0"
typeguard = "^4.1.0"
Faker = "^25.1.0"
email-validator = ">=2.0.0"
requests = "^2.28.1"
typer = { extras = ["all"], version = "^0.12.0" }
disposable-email-domains = ">=0.0.94"
passlib = { extras = ["argon2"], version = "^1.7.4" }
pytz = "^2024.1"
langcodes = "^3.3.0"
python-stdnum = "^1.18"
Unidecode = "^1.3"
pendulum = "^2.1.2"
sentry-sdk = { extras = ["fastapi"], version = "^2.1.0" }
user-agents = "^2.2.0"
boto3 = "^1.28.00"
fastapi-pagination = { extras = ["sqlalchemy"], version = "^0.12.0" }
pydantic-factories = "^1.4.1"
RegonAPI = "^1.3.1"
APScheduler = "4.0.0a2"
sqlalchemy-easy-profile = "^1.3"
pyvieser = "^0.0.4"
pyotp = "^2.9.0"
httpx = "^0.27"
psycopg = { extras = ["binary"], version = "^3.1" }
pandas = "^2.1.0"
fastapi-babel = "^0.0.9"
install = "^1.3.5"
uvloop = "^0.19.0"
httptools = "^0.6.1"
testcontainers = {extras = ["postgres"], version = "^4.4.0"}

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.6.2"
pytest = "^8.2"
pytest-cov = "^5.0.0"
pytest-pretty = "^1.2"
ruff = ">=0.0.249"
bump-pydantic = "^0.6.1"
pymender = "^0.2.0"
setuptools = "^68.0.0"
moto = "^4.1.14"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
parallel = false
source = [
    "app",
]
omit = [
    # omit anything in a .local directory anywhere
    '*/.local/*',
    '__init__.py',
    'tests/*',
    '*/tests/*',
    # omit anything in a .venv directory anywhere
    '.venv/*'
]

[tool.coverage.report]
skip_empty = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "@overload",
    'if __name__ == "__main__":',
    "if TYPE_CHECKING:",
]


[tool.ruff.lint]
select = [
    "ASYNC",
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    'Q',
    'RUF100',
    'C90', # is too complex ({complexity} > {max_complexity})
    'UP', #  upgrade syntax for newer versions of the language.
]
ignore = [
    #    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    #    "C901",  # too complex
    "W191", # indentation contains tabs
]
#flake8-quotes = {inline-quotes = 'single', multiline-quotes = 'double'}

[tool.ruff]
line-length = 120
target-version = "py310"
exclude = ["migrations"]
#flake8-quotes = {inline-quotes = 'single', multiline-quotes = 'double'}

[tool.ruff.format]
#quote-style = "single"
#indent-style = "tab"

[tool.ruff.lint.isort]
combine-as-imports = true
known-third-party = ["fastapi", "pydantic", "starlette"]
